package Servidor;

import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.rmi.registry.*; 

public class Servidor {
	
}
public class RmiServer extends UnicastRemoteObject implements RmiServerIntf {
    public static final String MESSAGE = "Hello World";

    public RmiServer() throws RemoteException {
        super(0);    // required to avoid the 'rmic' step, see below
    }

    public String getMessage() {
        return MESSAGE;
    }

    public static void main(String args[]) throws Exception {
        System.out.println("RMI server started");

        try { //special exception handler for registry creation
            LocateRegistry.createRegistry(1099); 
            System.out.println("java RMI registry created.");
        } catch (RemoteException e) {
            //do nothing, error means registry already exists
            System.out.println("java RMI registry already exists.");
        }
           
        //Instantiate RmiServer

        RmiServer obj = new RmiServer();

        // Bind this object instance to the name "RmiServer"
        Naming.rebind("//localhost/RmiServer", obj);
        System.out.println("PeerServer bound in registry");
    }
}



	public static void main(String args[]) {
		try {
			//1
			ServerSocket srvSocket = new ServerSocket(5566);
			System.out.println("Aguardando envio de arquivo ...");
			Socket socket = srvSocket.accept();

			//2
			byte[] objectAsByte = new byte[socket.getReceiveBufferSize()];
			BufferedInputStream bf = new BufferedInputStream(
					socket.getInputStream());
			bf.read(objectAsByte);

			//3
			Arquivo arquivo = (Arquivo) getObjectFromByte(objectAsByte);

			//4
			String dir = arquivo.getDiretorioDestino().endsWith("/") ? arquivo
					.getDiretorioDestino() + arquivo.getNome() : arquivo
					.getDiretorioDestino() + "/" + arquivo.getNome();
					System.out.println("Escrevendo arquivo " + dir);

					//5
					FileOutputStream fos = new FileOutputStream(dir);
					fos.write(arquivo.getConteudo());
					fos.close();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	private static Object getObjectFromByte(byte[] objectAsByte) {
		Object obj = null;
		ByteArrayInputStream bis = null;
		ObjectInputStream ois = null;
		try {
			bis = new ByteArrayInputStream(objectAsByte);
			ois = new ObjectInputStream(bis);
			obj = ois.readObject();

			bis.close();
			ois.close();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();           
		}                 

		return obj;

	}

}